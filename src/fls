#!/bin/bash
#

## fls -> file ls

if [ "$1" = "--help" ] || [ "$1" = "--readme" ]; then
	source sbsupport "$1" 2>&1
	exit $?
fi

#TODO: Providenciar a verificação de vários tipos de arquivos
#      ao mesmo tempo. $1$2 $1$3 $1$4 e assim por diante.
#      $1 indica o diretório. Os demais aos arquivos.

## É usado IFS para ser ignorado espaço e tabulação, e considerar
#  apenas o 'linefeed' como separador.
IFSb=IFS
IFS="
"

# param=$'-0\n'$(sbs "$@")
param=$'-0\n'"$@"

## Retira os argumentos de comando
for dir in $param; do
	# if [[ ${dir#"-"} = "$dir" ]]; then
	if [[ -f "$dir" ]]; then
		echo ${dir##*'/'}
	fi
done

## Retorna o separdor padrão
IFS=IFSb


exit

## Resolve o problema do ponto no final.
d=${dir%"."}

## Resolve o problema da falta da barra no final de diretório.
if [ -d "$dir" > /dev/null 2>&1 ] && [ "$dir" = "${dir%"/"}" ]; then
	d="$dir/"
fi

# echo "$dir"
## Se for arquivo então esvazia $d
if [[ -f "$dir" ]]; then
	dir=""
fi

echo "$dir"
exit

## Obtém uma lista dos arquivo em FILES
param=$(sbs "$@")
FILES=$(eval ls "$param" 2>&1)
## É usado IFS para ser ignorado espaço e tabulação, e considerar
#  apenas o 'linefeed' como separador.
IFSb=IFS
IFS="
"

## A busca é feita mesmo se houver erro na linha anterior.
for FILE in $FILES; do
    if [ -f "$FILE" ]; then
        # O retorno será apenas do arquivo,
        # sem a indicação do diretório.
        # echo "$d"
        echo ${FILE##*'/'}
    fi
done

## Retorna o separdor padrão
IFS=IFSb
